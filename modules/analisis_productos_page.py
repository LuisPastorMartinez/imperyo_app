import streamlit as st
import pandas as pd
from datetime import datetime

def show_analisis_productos_page(df_pedidos):
    """
    Muestra an√°lisis de productos con selector de a√±o y ambas columnas de precio.
    """
    st.header("üìä An√°lisis de Productos")
    st.write("---")

    if df_pedidos.empty:
        st.info("üì≠ No hay pedidos registrados a√∫n.")
        return

    # Validar columna obligatoria
    if 'Producto' not in df_pedidos.columns:
        st.error("‚ùå Falta la columna 'Producto'.")
        return

    # --- Asegurar columna 'A√±o' ---
    if 'A√±o' not in df_pedidos.columns:
        st.warning("‚ö†Ô∏è Columna 'A√±o' no encontrada. Usando a√±o actual para todos los pedidos.")
        df_pedidos['A√±o'] = datetime.now().year
    else:
        # Convertir a entero y limpiar
        df_pedidos['A√±o'] = pd.to_numeric(df_pedidos['A√±o'], errors='coerce').fillna(datetime.now().year).astype('int64')

    # --- Selector de a√±o ---
    a√±os_disponibles = sorted(df_pedidos['A√±o'].dropna().unique(), reverse=True)
    if not a√±os_disponibles:
        a√±os_disponibles = [datetime.now().year]
    
    a√±o_seleccionado = st.selectbox(
        "üìÖ Selecciona el a√±o para analizar:",
        options=a√±os_disponibles,
        index=0,
        key="analisis_a√±o_selector"
    )

    # --- Filtrar por a√±o seleccionado ---
    df_filtrado = df_pedidos[df_pedidos['A√±o'] == a√±o_seleccionado].copy()

    # --- Verificar qu√© columnas de precio existen ---
    tiene_precio = 'Precio' in df_filtrado.columns
    tiene_precio_factura = 'Precio Factura' in df_filtrado.columns

    if not tiene_precio and not tiene_precio_factura:
        st.error("‚ùå No se encontraron columnas de precio ('Precio' o 'Precio Factura').")
        return

    # --- Filtrar pedidos completados (opcional, pero recomendado) ---
    if {'Trabajo Terminado', 'Cobrado', 'Retirado'}.issubset(df_filtrado.columns):
        df_completados = df_filtrado[
            (df_filtrado['Trabajo Terminado'] == True) &
            (df_filtrado['Cobrado'] == True) &
            (df_filtrado['Retirado'] == True)
        ].copy()
        if df_completados.empty:
            st.warning(f"‚ö†Ô∏è No hay pedidos completados en {a√±o_seleccionado}. Mostrando todos los pedidos del a√±o.")
            df_completados = df_filtrado.copy()
    else:
        st.info(f"‚ÑπÔ∏è Mostrando todos los pedidos de {a√±o_seleccionado} (no se pueden filtrar completados).")
        df_completados = df_filtrado.copy()

    # --- Asegurar que las columnas de precio sean num√©ricas ---
    if tiene_precio:
        df_completados['Precio'] = pd.to_numeric(df_completados['Precio'], errors='coerce').fillna(0)
    else:
        df_completados['Precio'] = 0

    if tiene_precio_factura:
        df_completados['Precio Factura'] = pd.to_numeric(df_completados['Precio Factura'], errors='coerce').fillna(0)
    else:
        df_completados['Precio Factura'] = 0

    # --- Calcular total ---
    df_completados['Total'] = df_completados['Precio'] + df_completados['Precio Factura']

    # --- Agrupar por producto ---
    if df_completados.empty:
        st.info(f"üì≠ No hay datos para analizar en {a√±o_seleccionado}.")
        return

    analisis = df_completados.groupby('Producto').agg(
        Unidades=('Producto', 'count'),
        Suma_Precio=('Precio', 'sum'),
        Suma_Precio_Factura=('Precio Factura', 'sum'),
        Suma_Total=('Total', 'sum')
    ).reset_index()

    if analisis.empty:
        st.info(f"üì≠ No hay datos suficientes para el an√°lisis en {a√±o_seleccionado}.")
        return

    analisis = analisis.sort_values('Suma_Total', ascending=False).reset_index(drop=True)

    # --- M√©tricas ---
    col1, col2 = st.columns(2)
    with col1:
        st.metric("üëï Productos", len(analisis))
        st.metric("üî¢ Unidades", int(analisis['Unidades'].sum()))
    with col2:
        if tiene_precio:
            st.metric("üí∂ Precio Base", f"{analisis['Suma_Precio'].sum():,.2f} ‚Ç¨")
        if tiene_precio_factura:
            st.metric("üßæ Precio Factura", f"{analisis['Suma_Precio_Factura'].sum():,.2f} ‚Ç¨")

    st.metric("üí∞ **INGRESOS TOTALES**", f"{analisis['Suma_Total'].sum():,.2f} ‚Ç¨")

    # --- Producto m√°s vendido y rentable ---
    if not analisis.empty:
        mas_vendido = analisis.loc[analisis['Unidades'].idxmax()]
        mas_rentable = analisis.iloc[0]

        col3, col4 = st.columns(2)
        with col3:
            st.success(f"üîù **M√°s Vendido**\n\n**{mas_vendido['Producto']}**\n{int(mas_vendido['Unidades'])} unidades")
        with col4:
            st.success(f"üíé **M√°s Rentable**\n\n**{mas_rentable['Producto']}**\n{mas_rentable['Suma_Total']:,.2f} ‚Ç¨")

    # --- Tabla detallada ---
    st.subheader(f"üìã Desglose por Producto ({a√±o_seleccionado})")
    cols_mostrar = ['Producto', 'Unidades']
    if tiene_precio:
        cols_mostrar.append('Suma_Precio')
    if tiene_precio_factura:
        cols_mostrar.append('Suma_Precio_Factura')
    cols_mostrar.append('Suma_Total')

    analisis_display = analisis[cols_mostrar].copy()
    for col in ['Suma_Precio', 'Suma_Precio_Factura', 'Suma_Total']:
        if col in analisis_display.columns:
            analisis_display[col] = analisis_display[col].apply(lambda x: f"{x:,.2f} ‚Ç¨")

    st.dataframe(
        analisis_display,
        use_container_width=True,
        hide_index=True,
        column_config={
            "Producto": "Producto",
            "Unidades": st.column_config.NumberColumn("üëï Unidades", format="%d"),
            "Suma_Precio": "üí∂ Precio Base",
            "Suma_Precio_Factura": "üßæ Precio Factura",
            "Suma_Total": "üí∞ Total"
        }
    )

    # --- Exportar ---
    st.write("---")
    csv = analisis.to_csv(index=False).encode('utf-8')
    st.download_button(
        "üì• Descargar an√°lisis",
        csv,
        f"analisis_productos_{a√±o_seleccionado}.csv",
        "text/csv"
    )
# modules/pedidos_page.py oki
import streamlit as st
import pandas as pd
from datetime import datetime

# Importamos las funciones de pedido
try:
    from modules.pedido import show_create, show_consult, show_modify, show_delete
except ImportError as e:
    st.error(f"‚ùå Error al importar 'modules.pedido': {e}")
    st.stop()

def show_pedidos_page(df_pedidos=None, df_listas=None):
    """
    P√°gina principal de Pedidos.
    Si no se pasan df_pedidos/df_listas, intenta cargarlos desde sesi√≥n o Firestore.
    """
    # --- CARGA DE DATOS (solo si no vienen como par√°metro) ---
    if df_pedidos is None or df_listas is None:
        data = st.session_state.get('data', {})
        if isinstance(data, dict) and 'df_pedidos' in data and 'df_listas' in data:
            df_pedidos = data['df_pedidos']
            df_listas = data['df_listas']
        else:
            st.error("‚ùå No se encontraron los datos necesarios. Por favor, recarga la aplicaci√≥n desde la p√°gina principal.")
            return

    # --- VALIDACIONES ---
    if df_pedidos is None:
        st.error("‚ùå No se carg√≥ el DataFrame de pedidos.")
        return
    if df_listas is None:
        st.error("‚ùå No se carg√≥ el DataFrame de listas.")
        return

    # --- PREPARAR COLUMNAS ---
    if not df_pedidos.empty and 'A√±o' in df_pedidos.columns:
        df_pedidos['A√±o'] = pd.to_numeric(df_pedidos['A√±o'], errors='coerce').fillna(datetime.now().year).astype('int64')

    # --- OBTENER A√ëO SELECCIONADO (sincronizado con p√°gina de inicio) ---
    a√±o_actual = datetime.now().year

    # Si hay datos, obtener a√±os disponibles
    if not df_pedidos.empty:
        a√±os_disponibles = sorted(df_pedidos['A√±o'].dropna().unique(), reverse=True)
    else:
        a√±os_disponibles = [a√±o_actual]

    # Usar el a√±o seleccionado en la sesi√≥n (sincronizado con p√°gina de inicio)
    a√±o_seleccionado = st.sidebar.selectbox(
        "üìÖ Filtrar por A√±o",
        options=a√±os_disponibles,
        index=a√±os_disponibles.index(st.session_state.get('selected_year', a√±o_actual)) 
               if st.session_state.get('selected_year', a√±o_actual) in a√±os_disponibles 
               else 0,
        key="a√±o_selector_pedidos"
    )

    # Guardar selecci√≥n en sesi√≥n (para sincronizar con otras p√°ginas)
    st.session_state.selected_year = a√±o_seleccionado

    # --- FILTRAR POR A√ëO ---
    df_pedidos_filtrado = df_pedidos[df_pedidos['A√±o'] == a√±o_seleccionado].copy()

    # --- A√ëADIR COLUMNA 'Estado' SI NO EXISTE ---
    if 'Estado' not in df_pedidos_filtrado.columns:
        def calcular_estado(row):
            if row.get('Pendiente', False):
                return 'Pendiente'
            if (row.get('Trabajo Terminado', False) and 
                row.get('Cobrado', False) and 
                row.get('Retirado', False)):
                return 'Completado'
            if row.get('Trabajo Terminado', False):
                return 'Terminado'
            if row.get('Inicio Trabajo', False):
                return 'Empezado'
            return 'Nuevo'
        df_pedidos_filtrado['Estado'] = df_pedidos_filtrado.apply(calcular_estado, axis=1)

    # --- MOSTRAR RESUMEN R√ÅPIDO ---
    st.markdown(f"### üìã Pedidos del a√±o {a√±o_seleccionado}")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üì¶ Total Pedidos", len(df_pedidos_filtrado))
    with col2:
        terminados = len(df_pedidos_filtrado[df_pedidos_filtrado['Estado'] == 'Terminado'])
        st.metric("‚úÖ Terminados", terminados)
    with col3:
        pendientes = len(df_pedidos_filtrado[df_pedidos_filtrado['Estado'] == 'Pendiente'])
        st.metric("‚è≥ Pendientes", pendientes)

    st.write("---")

    # --- PESTA√ëAS CON ICONOS ---
    tab1, tab2, tab3, tab4 = st.tabs([
        "‚ûï Crear Pedido",
        "üîç Consultar Pedidos", 
        "‚úèÔ∏è Modificar Pedido",
        "üóëÔ∏è Eliminar Pedido"
    ])

    with tab1:
        st.subheader("‚ûï Crear Nuevo Pedido")
        show_create(df_pedidos_filtrado, df_listas)

    with tab2:
        st.subheader("üîç Consultar y Filtrar Pedidos")
        
        # Filtro de b√∫squeda r√°pida
        if not df_pedidos_filtrado.empty:
            search_term = st.text_input("üîç Buscar por Cliente, Producto o ID", placeholder="Escribe para filtrar...")
            if search_term:
                mask = df_pedidos_filtrado.apply(lambda row: search_term.lower() in str(row).lower(), axis=1)
                df_filtrado_busqueda = df_pedidos_filtrado[mask]
                st.info(f"üîé Se encontraron {len(df_filtrado_busqueda)} resultados.")
            else:
                df_filtrado_busqueda = df_pedidos_filtrado
        else:
            df_filtrado_busqueda = df_pedidos_filtrado

        show_consult(df_filtrado_busqueda, df_listas)

    with tab3:
        st.subheader("‚úèÔ∏è Modificar Pedido Existente")
        show_modify(df_pedidos_filtrado, df_listas)

    with tab4:
        st.subheader("üóëÔ∏è Eliminar Pedido")
        show_delete(df_pedidos_filtrado, df_listas)

# Para pruebas locales
if __name__ == "__main__":
    show_pedidos_page()